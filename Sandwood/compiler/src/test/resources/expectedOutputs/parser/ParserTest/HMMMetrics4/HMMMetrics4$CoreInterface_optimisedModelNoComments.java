package org.sandwood.compiler.tests.parser;

interface HMMMetrics4$CoreInterface extends org.sandwood.runtime.internal.model.CoreModel {
	public double[][] get$current_metric_mean();
	public void set$current_metric_mean(double[][] cv$value);
	public double[][] get$current_metric_valid_bias();
	public void set$current_metric_valid_bias(double[][] cv$value);
	public double[][] get$current_metric_var();
	public void set$current_metric_var(double[][] cv$value);
	public boolean get$fixedFlag$sample111();
	public void set$fixedFlag$sample111(boolean cv$value);
	public boolean get$fixedFlag$sample126();
	public void set$fixedFlag$sample126(boolean cv$value);
	public boolean get$fixedFlag$sample161();
	public void set$fixedFlag$sample161(boolean cv$value);
	public boolean get$fixedFlag$sample173();
	public void set$fixedFlag$sample173(boolean cv$value);
	public boolean get$fixedFlag$sample24();
	public void set$fixedFlag$sample24(boolean cv$value);
	public boolean get$fixedFlag$sample30();
	public void set$fixedFlag$sample30(boolean cv$value);
	public boolean get$fixedFlag$sample50();
	public void set$fixedFlag$sample50(boolean cv$value);
	public boolean get$fixedFlag$sample63();
	public void set$fixedFlag$sample63(boolean cv$value);
	public boolean get$fixedFlag$sample96();
	public void set$fixedFlag$sample96(boolean cv$value);
	public double[] get$initialStateDistribution();
	public void set$initialStateDistribution(double[] cv$value);
	public int[][] get$length$metric();
	public void set$length$metric(int[][] cv$value);
	public double get$logProbability$current_metric_mean();
	public double get$logProbability$current_metric_valid_bias();
	public double get$logProbability$current_metric_var();
	public double get$logProbability$initialStateDistribution();
	public double get$logProbability$m();
	public double get$logProbability$metric_g();
	public double get$logProbability$metric_valid_g();
	public double get$logProbability$st();
	public double[][] get$m();
	public void set$m(double[][] cv$value);
	public int get$max_metric();
	public void set$max_metric(int cv$value);
	public double[][][] get$metric();
	public void set$metric(double[][][] cv$value);
	public double[][][] get$metric_g();
	public void set$metric_g(double[][][] cv$value);
	public boolean[][][] get$metric_valid();
	public void set$metric_valid(boolean[][][] cv$value);
	public boolean[][][] get$metric_valid_g();
	public void set$metric_valid_g(boolean[][][] cv$value);
	public int get$noSamples();
	public int get$noServers();
	public int get$noStates();
	public void set$noStates(int cv$value);
	public int[][] get$st();
	public void set$st(int[][] cv$value);
	public double[] get$v();
	public void logEvidenceGeneration();
}