package org.sandwood.compiler.tests.parser;

interface DiscreteChoiceRandCoeff$CoreInterface extends org.sandwood.runtime.internal.model.CoreModel {
	public int[] get$ObsChoices();
	public void set$ObsChoices(int[] cv$value);
	public int[][] get$Prices();
	public void set$Prices(int[][] cv$value);
	public double get$b();
	public void set$b(double cv$value);
	public double[] get$beta();
	public void set$beta(double[] cv$value);
	public int[] get$choices();
	public void set$choices(int[] cv$value);
	public boolean get$fixedFlag$sample22();
	public void set$fixedFlag$sample22(boolean cv$value);
	public boolean get$fixedFlag$sample29();
	public void set$fixedFlag$sample29(boolean cv$value);
	public boolean get$fixedFlag$sample35();
	public void set$fixedFlag$sample35(boolean cv$value);
	public boolean get$fixedFlag$sample41();
	public void set$fixedFlag$sample41(boolean cv$value);
	public boolean get$fixedFlag$sample76();
	public void set$fixedFlag$sample76(boolean cv$value);
	public double get$logProbability$b();
	public double get$logProbability$beta();
	public double get$logProbability$choices();
	public double get$logProbability$prob();
	public double get$logProbability$sigma();
	public double get$logProbability$ut();
	public int get$noObs();
	public void set$noObs(int cv$value);
	public int get$noProducts();
	public void set$noProducts(int cv$value);
	public double[][] get$prob();
	public double get$sigma();
	public void set$sigma(double cv$value);
	public double[] get$ut();
	public void set$ut(double[] cv$value);
	public void logEvidenceGeneration();
}