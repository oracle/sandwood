package org.sandwood.compiler.tests.parser;

interface HMMMetrics2$CoreInterface extends org.sandwood.runtime.internal.model.CoreModel {
	public boolean get$fixedFlag$sample104();
	public void set$fixedFlag$sample104(boolean cv$value);
	public boolean get$fixedFlag$sample113();
	public void set$fixedFlag$sample113(boolean cv$value);
	public boolean get$fixedFlag$sample23();
	public void set$fixedFlag$sample23(boolean cv$value);
	public boolean get$fixedFlag$sample29();
	public void set$fixedFlag$sample29(boolean cv$value);
	public boolean get$fixedFlag$sample42();
	public void set$fixedFlag$sample42(boolean cv$value);
	public boolean get$fixedFlag$sample51();
	public void set$fixedFlag$sample51(boolean cv$value);
	public boolean get$fixedFlag$sample60();
	public void set$fixedFlag$sample60(boolean cv$value);
	public boolean get$fixedFlag$sample75();
	public void set$fixedFlag$sample75(boolean cv$value);
	public boolean get$fixedFlag$sample88();
	public void set$fixedFlag$sample88(boolean cv$value);
	public double[] get$initialStateDistribution();
	public void set$initialStateDistribution(double[] cv$value);
	public int[] get$length$metric();
	public void set$length$metric(int[] cv$value);
	public double get$logProbability$initialStateDistribution();
	public double get$logProbability$m();
	public double get$logProbability$metric_g();
	public double get$logProbability$metric_mean();
	public double get$logProbability$metric_valid_bias();
	public double get$logProbability$metric_valid_g();
	public double get$logProbability$metric_var();
	public double get$logProbability$st();
	public double[][] get$m();
	public void set$m(double[][] cv$value);
	public double[][] get$metric();
	public void set$metric(double[][] cv$value);
	public double[][] get$metric_g();
	public void set$metric_g(double[][] cv$value);
	public double[] get$metric_mean();
	public void set$metric_mean(double[] cv$value);
	public boolean[][] get$metric_valid();
	public void set$metric_valid(boolean[][] cv$value);
	public double[] get$metric_valid_bias();
	public void set$metric_valid_bias(double[] cv$value);
	public boolean[][] get$metric_valid_g();
	public void set$metric_valid_g(boolean[][] cv$value);
	public double[] get$metric_var();
	public void set$metric_var(double[] cv$value);
	public int get$noSamples();
	public int get$noStates();
	public void set$noStates(int cv$value);
	public int[][] get$st();
	public void set$st(int[][] cv$value);
	public double[] get$v();
	public void logEvidenceGeneration();
}