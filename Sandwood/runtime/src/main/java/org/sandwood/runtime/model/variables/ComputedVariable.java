/*
 * Sandwood
 *
 * Copyright (c) 2019-2024, Oracle and/or its affiliates
 *
 * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
 */

package org.sandwood.runtime.model.variables;

import org.sandwood.runtime.model.RetentionPolicy;

/**
 * An interface that is implemented by all objects that represent values that are computed as the model executes.
 */
public interface ComputedVariable extends HasProbability, Variable {

    /**
     * An Enumeration to describe the current state of the variable
     *
     */
    enum Immutability {
        /**
         * This value can change freely
         */
        FREE,
        /**
         * This value is fixed in the state generated by sampling.
         */
        FIXED,
        /**
         * Some of the sampled values that are composed to make this value are fixed.
         */
        PARTIALLY_FIXED,
        /**
         * This value is always the same in the model. For example the sum of two constants.
         */
        DETERMINISTIC
    }

    /**
     * Method to test if the model been run so that calling getMap or getSamples on this variable is a valid action.
     * 
     * @return A boolean showing if the model has been set.
     */
    boolean valueComputed();

    /**
     * Method to test if the value been set either by the user, or by running the model.
     * 
     * @return A boolean showing if the model has been set.
     */
    boolean isSet();

    /**
     * Method to test if this value can have its value set by the user. Currently the only computed variables that can
     * have their value set by users are sample variables.
     * 
     * @return Returns true if this value can be set.
     */
    boolean isSettable();

    /**
     * Method to set and fix the value to the value stored as the MAP value for this variable. A boolean is returned to
     * record if it succeeded. The method will not succeed if a MAP value has not been computed for this variable. A MAP
     * value will only be present to set to the variables value if the {@link RetentionPolicy retention policy} for the
     * variable was set to MAP and {@link Model#inferValues(int, ComputedVariable...) variable inference} was the last
     * inference operation performed on the model. The retention policy can be set to MAP by either setting the MAP
     * policy for the whole model and not overriding the policy for this variable, or setting the policy to MAP
     * specifically for this variable. Retention policies are set via the methods
     * {@link Model#setDefaultRetentionPolicy(RetentionPolicy) setDefaultRetentionPolicy} for the model and
     * {@link ComputedVariable#setRetentionPolicy(RetentionPolicy) setRetentionPolicy} for the variable.
     * 
     * @return Was the variable set and fixed to the MAP value.
     */
    boolean setToMAPValue();

    /**
     * A method to set the retention policy of this variable.
     * 
     * @param p The retention policy this variable is to be set to.
     */
    void setRetentionPolicy(RetentionPolicy p);

    /**
     * Method to query the retention policy of this variable.
     * 
     * @return The retention policy this variable is currently set to.
     */
    RetentionPolicy getRetentionPolicy();

    /**
     * Method to fix and unfix the value in the model represented by this object.
     * 
     * @param fixed If true the parameter is fixed, if false the parameter is free to be modified.
     */
    void setFixed(boolean fixed);

    /**
     * Method to test if this variable is fixed
     * 
     * @return Is the value fixed?
     */
    Immutability isFixed();
}